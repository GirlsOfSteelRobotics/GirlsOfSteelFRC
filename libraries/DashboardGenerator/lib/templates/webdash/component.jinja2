import { html, LitElement } from "lit";
import { customElement, property } from "lit/decorators.js";
import { MAX_WIDTH, MAX_HEIGHT, Renderer } from "./{{widget.package_name.as_dash()}}/renderer";
import { {{widget.table}}Data
{%- if widget.has_nested_tables -%}
    {%- for child in widget.children_tables -%}
    , {{child.table}}Data
    {%- endfor -%}
{%- endif %} } from "./{{widget.package_name.as_dash()}}/datatypes";

/* tslint:disable */

export const elementConfig = {
  dashboard: {
    displayName: "{{widget.table}}",
  },
{%- if widget.has_nested_tables %}
  slots: [{ name: '', allowedChildren: [
{%- for child in widget.children_tables -%}
"{{subtable_name(widget, child)}}"{% if not loop.last %}, {%endif%}
{%- endfor -%}
] }],
{%- endif %}
  properties: {
{%- if not widget.has_nested_tables %}
{%- for child in widget.children_tables %}
  {%- for variable in child.entries %}
    {{variable.name}}: { type: "{{javascript_type(variable.type)}}", {% if loop.first %}primary: true{%else%}reflect: true{%endif%} },
  {%- endfor %}
{%- endfor %}
{%- endif %}
  },
  demos: [
    {
      html: `
      <{{widget.package_name.as_dash()}} source-key="/{{widget.table}}" source-provider="NetworkTables" style="width: 460px; height: 315px;">
{%- if widget.has_nested_tables %}
{%- for child in widget.children_tables %}
        <{{subtable_name(widget, child)}} source-provider="NetworkTables" source-key="/{{widget.table}}/{{child.table}}"></{{subtable_name(widget, child)}}>
{%- endfor %}
{%- endif %}
      </{{widget.package_name.as_dash()}}>
    `,
    },
  ],
};


{% if widget.has_nested_tables %}
{%- for child in widget.children_tables %}
export const {{child.table.lower_first_char()}}ElementConfig = {
  dashboard: {
    displayName: "{{child.table}}",
  },
  properties: {
  {%- for variable in child.entries %}
    {{variable.name}}: { type: "{{javascript_type(variable.type)}}", {% if loop.first %}primary: true{%else%}reflect: true{%endif%} },
  {%- endfor %}
  }
};


@customElement("{{subtable_name(widget, child)}}")
export class {{child.table}} extends LitElement {
  static properties = controlPanelElementConfig.properties;

}
{%- endfor %}
{%- endif %}

@customElement("{{widget.package_name.as_dash()}}")
export class {{widget.table}} extends LitElement {
{%- if not widget.has_nested_tables %}
  static properties = elementConfig.properties;

{% for child in widget.children_tables %}
  {%- for variable in child.entries %}
  @property({ type: {{javascript_type(variable.type)}} }) {{variable.name}} = {{variable.default_value()}};
  {%- endfor %}
{%- endfor %}
{%- endif %}

  renderer = new Renderer();

  firstUpdated() {
    const canvas = this.shadowRoot?.querySelector("canvas") as HTMLCanvasElement;
    const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;
{% if widget.has_nested_tables %}
{%- for child in widget.children_tables %}
    this.{{child.table.lower_first_char()}} = this.children[{{loop.index0}}];
{%- endfor %}
{%- endif %}

    const updateObjectsAndDrawings = () => {
      this.renderRobot(canvas, ctx);
      window.requestAnimationFrame(updateObjectsAndDrawings);
    };

    const resizeObserver = new ResizeObserver(() => this.resized());
    resizeObserver.observe(this);

    window.requestAnimationFrame(updateObjectsAndDrawings);
  }

  private renderRobot(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D): void {
    ctx.save();

    ctx.clearRect(0, 0, canvas.width, canvas.height);


    const { width, height } = this.getBoundingClientRect();
    const scale = Math.min(width / MAX_WIDTH, height / MAX_HEIGHT);

    ctx.beginPath();
    ctx.scale(scale, scale);

  {%- for child in widget.children_tables %}

    const {{child.table.lower_first_char()}}Info: {{child.table}}Data = {
    {%- for variable in child.entries %}
      {{variable.name}}: this.{% if widget.has_nested_tables %}{{child.table.lower_first_char()}}.{% endif %}{{variable.name}},
    {%- endfor %}
    };
  {%- endfor %}

{%- if widget.has_nested_tables %}
    const {{widget.table.lower_first_char()}}Info: {{widget.table}}Data = {
{%- for child in widget.children_tables %}
      {{child.table.lower_first_char()}} : {{child.table.lower_first_char()}}Info,
{%- endfor %}
    };
{%- endif %}

    this.renderer.render(ctx, {{widget.table.lower_first_char()}}Info);

    ctx.restore();
  }

  private resized(): void {
    this.requestUpdate();
  }

  render() {
    const rect = this.getBoundingClientRect();
    const { width, height } = rect;
    return html`
      <canvas
        width="${width}"
        height="${height}"
        style="border:1px solid #000000;"
      />
    `;
  }
}

