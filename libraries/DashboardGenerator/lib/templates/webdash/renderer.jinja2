
import { Rectangle, Circle } from "../utils/shapes";
import { {{widget.table}}Data } from "./datatypes"


export const MAX_WIDTH = 1; // TODO figure out real value
export const MAX_HEIGHT = 1; // TODO figure out real value

{% for shape in widget.shapes %}
    {%- if shape.type == "Rectangle" %}
const {{camel_to_snake(shape.name).upper()}}_HEIGHT = 1; // TODO figure out real value
const {{camel_to_snake(shape.name).upper()}}_WIDTH = 1; // TODO figure out real value
    {%- elif shape.type == "Arc" %}
const {{camel_to_snake(shape.name).upper()}}_HEIGHT = 1; // TODO figure out real value
const {{camel_to_snake(shape.name).upper()}}_WIDTH = 1; // TODO figure out real value
    {%- elif shape.type == "Circle" %}
const {{camel_to_snake(shape.name).upper()}}_RADIUS = 1; // TODO figure out real value
    {%- endif %}
{%- endfor %}

{% for shape in widget.shapes %}
const {{camel_to_snake(shape.name).upper()}}_X = 1; // TODO figure out real value
const {{camel_to_snake(shape.name).upper()}}_Y = 1; // TODO figure out real value
{%- endfor %}


export class Renderer {
{% for shape in widget.shapes %}
   m_{{shape.name}}: {{shape.type}};
{%- endfor %}

  constructor() {
{% for shape in widget.shapes %}
{%- if shape.type == "Rectangle" %}
    this.m_{{shape.name}} = new {{shape.type}}({{camel_to_snake(shape.name).upper()}}_X, {{camel_to_snake(shape.name).upper()}}_Y, {{camel_to_snake(shape.name).upper()}}_WIDTH, {{camel_to_snake(shape.name).upper()}}_HEIGHT, 'papayawhip');
{%- else %}
    this.m_{{shape.name}} = new {{shape.type}}({{camel_to_snake(shape.name).upper()}}_X, {{camel_to_snake(shape.name).upper()}}_Y, {{camel_to_snake(shape.name).upper()}}_RADIUS, 'papayawhip');
{%- endif %}
{%- endfor %}
  }

{% for child in widget.children_tables %}
  private update{{child.table}}({{lower_first_char(child.table)}}Data: {{child.table}}Data) {
    // TODO update
  }
{% endfor %}
{% if widget.children_tables|length != 1 %}
  private update{{widget.table}}({{lower_first_char(widget.table)}}Data : {{widget.table}}Data) {
{%- for child in widget.children_tables %}
    this.update{{child.table}}({{lower_first_char(widget.table)}}Data.{{lower_first_char(child.table)}});
{%- endfor %}
  }
{%- endif %}

  render(ctx: CanvasRenderingContext2D, {{lower_first_char(widget.table)}}Data: {{widget.table}}Data) {

    this.update{{widget.table}}({{lower_first_char(widget.table)}}Data)
{% for shape in widget.shapes %}
    this.m_{{shape.name}}.render(ctx);
{%- endfor %}
  }

}