// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc3504.OrangeEOPP.subsystems;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc3504.OrangeEOPP.RobotMap;
import org.usfirst.frc3504.OrangeEOPP.commands.DrivebyJoystick;
/**
 *
 */
public class Drive extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController left = RobotMap.driveLeft;
    SpeedController right = RobotMap.driveRight;
    SpeedController left2 = RobotMap.driveLeft2;
    SpeedController right2 = RobotMap.driveRight2;
    RobotDrive robotDrive = RobotMap.driveRobotDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new DrivebyJoystick());
    }

    /*
     * Adjusts the value in the parameter for the dead zone (when the joystick
     * is only slightly touched)
     */
    public double simpleDeadZone(double value, double deadzone) {
        if(Math.abs(value) < deadzone)
            return 0.0;
        return value;
    }

    /*
     * Moves the chassis with the x and y speeds in the parameters after
     * adjusting for the dead zone.
     */
    public void move(Joystick drive)
    {
        robotDrive.arcadeDrive(drive);
    }

    /*
     * Stops the motors on the chassis
     */
    public void stop()
    {
        robotDrive.drive(0.0,0.0);
    }
}
