package com.gos.power_up;

import edu.wpi.first.vision.VisionPipeline;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfKeyPoint;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgproc.Imgproc;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

/**
 * Pipeline class.
 *
 * <p>An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
@SuppressWarnings("PMD")
public class Pipeline implements VisionPipeline {

    //Outputs
    private final Mat resizeImageOutput = new Mat();
    private final Mat hslThreshold0Output = new Mat();
    private final Mat hslThreshold1Output = new Mat();
    private final Mat cvBitwiseOrOutput = new Mat();
    private final MatOfKeyPoint findBlobsOutput = new MatOfKeyPoint();

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    /**
     * This is the primary method that runs the entire pipeline and updates the outputs.
     */
    @Override
    public void process(Mat source0) {
        // Step Resize_Image0:
        Mat resizeImageInput = source0;
        double resizeImageWidth = 450.0;
        double resizeImageHeight = 275.0;
        int resizeImageInterpolation = Imgproc.INTER_CUBIC;
        resizeImage(resizeImageInput, resizeImageWidth, resizeImageHeight, resizeImageInterpolation, resizeImageOutput);

        // Step HSL_Threshold0:
        Mat hslThreshold0Input = resizeImageOutput;
        double[] hslThreshold0Hue = {79.31654676258991, 118.87945670628184};
        double[] hslThreshold0Saturation = {119.24460431654676, 255.0};
        double[] hslThreshold0Luminance = {183.45323741007192, 255.0};
        hslThreshold(hslThreshold0Input, hslThreshold0Hue, hslThreshold0Saturation, hslThreshold0Luminance, hslThreshold0Output);

        // Step HSL_Threshold1:
        Mat hslThreshold1Input = resizeImageOutput;
        double[] hslThreshold1Hue = {0.0, 52.34042553191489};
        double[] hslThreshold1Saturation = {233.38983050847457, 255.0};
        double[] hslThreshold1Luminance = {184.88700564971748, 255.0};
        hslThreshold(hslThreshold1Input, hslThreshold1Hue, hslThreshold1Saturation, hslThreshold1Luminance, hslThreshold1Output);

        // Step CV_bitwise_or0:
        Mat cvBitwiseOrSrc1 = hslThreshold0Output;
        Mat cvBitwiseOrSrc2 = hslThreshold1Output;
        cvBitwiseOr(cvBitwiseOrSrc1, cvBitwiseOrSrc2, cvBitwiseOrOutput);

        // Step Find_Blobs0:
        Mat findBlobsInput = cvBitwiseOrOutput;
        double findBlobsMinArea = 1.0;
        double[] findBlobsCircularity = {0.0, 1.0};
        boolean findBlobsDarkBlobs = true;
        findBlobs(findBlobsInput, findBlobsMinArea, findBlobsCircularity, findBlobsDarkBlobs, findBlobsOutput);

    }

    /**
     * This method is a generated getter for the output of a Resize_Image.
     *
     * @return Mat output from Resize_Image.
     */
    public Mat resizeImageOutput() {
        return resizeImageOutput;
    }

    /**
     * This method is a generated getter for the output of a HSL_Threshold.
     *
     * @return Mat output from HSL_Threshold.
     */
    public Mat hslThreshold0Output() {
        return hslThreshold0Output;
    }

    /**
     * This method is a generated getter for the output of a HSL_Threshold.
     *
     * @return Mat output from HSL_Threshold.
     */
    public Mat hslThreshold1Output() {
        return hslThreshold1Output;
    }

    /**
     * This method is a generated getter for the output of a CV_bitwise_or.
     *
     * @return Mat output from CV_bitwise_or.
     */
    public Mat cvBitwiseOrOutput() {
        return cvBitwiseOrOutput;
    }

    /**
     * This method is a generated getter for the output of a Find_Blobs.
     *
     * @return MatOfKeyPoint output from Find_Blobs.
     */
    public MatOfKeyPoint findBlobsOutput() {
        return findBlobsOutput;
    }


    /**
     * Scales and image to an exact size.
     *
     * @param input         The image on which to perform the Resize.
     * @param width         The width of the output in pixels.
     * @param height        The height of the output in pixels.
     * @param interpolation The type of interpolation.
     * @param output        The image in which to store the output.
     */
    private void resizeImage(Mat input, double width, double height,
                             int interpolation, Mat output) {
        Imgproc.resize(input, output, new Size(width, height), 0.0, 0.0, interpolation);
    }

    /**
     * Segment an image based on hue, saturation, and luminance ranges.
     *
     * @param input  The image on which to perform the HSL threshold.
     * @param hue    The min and max hue
     * @param sat    The min and max saturation
     * @param lum    The min and max luminance
     */
    private void hslThreshold(Mat input, double[] hue, double[] sat, double[] lum,
                              Mat out) {
        Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HLS);
        Core.inRange(out, new Scalar(hue[0], lum[0], sat[0]),
            new Scalar(hue[1], lum[1], sat[1]), out);
    }

    /**
     * Computes the per channel or of two images.
     *
     * @param src1 The first image to use.
     * @param src2 The second image to use.
     * @param dst  the result image when the or is performed.
     */
    private void cvBitwiseOr(Mat src1, Mat src2, Mat dst) {
        Core.bitwise_or(src1, src2, dst);
    }

    /**
     * Detects groups of pixels in an image.
     *
     * @param input       The image on which to perform the find blobs.
     * @param minArea     The minimum size of a blob that will be found
     * @param circularity The minimum and maximum circularity of blobs that will be found
     * @param darkBlobs   The boolean that determines if light or dark blobs are found.
     * @param blobList    The output where the MatOfKeyPoint is stored.
     */
    private void findBlobs(Mat input, double minArea, double[] circularity,
                           Boolean darkBlobs, MatOfKeyPoint blobList) {
        FeatureDetector blobDet = FeatureDetector.create(FeatureDetector.SIMPLEBLOB);
        try {
            File tempFile = File.createTempFile("config", ".xml");

            StringBuilder config = new StringBuilder();

            config.append("<?xml version=\"1.0\"?>\n");
            config.append("<opencv_storage>\n");
            config.append("<thresholdStep>10.</thresholdStep>\n");
            config.append("<minThreshold>50.</minThreshold>\n");
            config.append("<maxThreshold>220.</maxThreshold>\n");
            config.append("<minRepeatability>2</minRepeatability>\n");
            config.append("<minDistBetweenBlobs>10.</minDistBetweenBlobs>\n");
            config.append("<filterByColor>1</filterByColor>\n");
            config.append("<blobColor>");
            config.append((darkBlobs ? 0 : 255));
            config.append("</blobColor>\n");
            config.append("<filterByArea>1</filterByArea>\n");
            config.append("<minArea>");
            config.append(minArea);
            config.append("</minArea>\n");
            config.append("<maxArea>");
            config.append(Integer.MAX_VALUE);
            config.append("</maxArea>\n");
            config.append("<filterByCircularity>1</filterByCircularity>\n");
            config.append("<minCircularity>");
            config.append(circularity[0]);
            config.append("</minCircularity>\n");
            config.append("<maxCircularity>");
            config.append(circularity[1]);
            config.append("</maxCircularity>\n");
            config.append("<filterByInertia>1</filterByInertia>\n");
            config.append("<minInertiaRatio>0.1</minInertiaRatio>\n");
            config.append("<maxInertiaRatio>" + Integer.MAX_VALUE + "</maxInertiaRatio>\n");
            config.append("<filterByConvexity>1</filterByConvexity>\n");
            config.append("<minConvexity>0.95</minConvexity>\n");
            config.append("<maxConvexity>" + Integer.MAX_VALUE + "</maxConvexity>\n");
            config.append("</opencv_storage>\n");
            FileWriter writer;
            writer = new FileWriter(tempFile, false);
            writer.write(config.toString());
            writer.close();
            blobDet.read(tempFile.getPath());
        } catch (IOException e) {
            e.printStackTrace();
        }

        blobDet.detect(input, blobList);
    }


}
